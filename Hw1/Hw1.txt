Script started on Fri Jan 23 11:14:38 2015
%cat makefile
# CS225
# Project 1
# Aircraft & Simple GUI Menu
#

# Here is a simple Make Macro.
LINK_TARGET = mediaItem1Project

# Here is a Make Macro that uses the backslash to extend to multiple lines.
OBJS =  \
 Hw1.o \
	Hw1Lib.o \
	mediaItem.o

# Here is a Make Macro defined by two Macro Expansions.
# A Macro Expansion may be treated as a textual replacement of the Make Macro.
# Macro Expansions are introduced with $ and enclosed in (parentheses).
REBUILDABLES = $(OBJS) $(LINK_TARGET)

# The rule for "all" is used to incrementally build your system.
# It does this by expressing a dependency on the results of that system,
# which in turn have their own rules and dependencies.
all : $(LINK_TARGET)
	echo All done

# Here is a simple Rule (used for "cleaning" your build environment).
# It has a Target named "clean" (left of the colon ":" on the first line),
# no Dependencies (right of the colon),
# and two Commands (indented by tabs on the lines that follow).
# The space before the colon is not required but added here for clarity.
clean : 
	rm -f $(REBUILDABLES)
	echo Clean done

# There are two standard Targets your Makefile should probably have:
# "all" and "clean", because they are often command-line Goals.
# Also, these are both typically Artificial Targets, because they don't typically
# correspond to real files named "all" or "clean".  

# There is no required order to the list of rules as they appear in the Makefile.
# Make will build its own dependency tree and only execute each rule only once
# its dependencies' rules have been executed successfully.

# Here is a Rule that uses some built-in Make Macros in its command:
# $@ expands to the rule's target, in this case "test_me.exe".
# $^ expands to the rule's dependencies, in this case the three files
# main.o, test1.o, and  test2.o.
$(LINK_TARGET) : $(OBJS)
	g++ -g -Wall -o $@ $^

# Here is a Pattern Rule, often used for compile-line.
# It says how to create a file with a .o suffix, given a file with a .cpp suffix.
# The rule's command uses some built-in Make Macros:
# $@ for the pattern-matched target
# $< for the pattern-matched dependency
%.o : %.cpp
	g++ -g -Wall -o $@ -c $<

# These are Dependency Rules, which are rules without any command.
# Dependency Rules indicate that if any file to the right of the colon changes,
# the target to the left of the colon should be considered out-of-date.
# The commands for making an out-of-date target up-to-date may be found elsewhere
# (in this case, by the Pattern Rule above).
# Dependency Rules are often used to capture header file dependencies.
Hw1.cpp : Hw1Lib.h mediaItem.h
mediaItem.cpp : mediaItem.h
Hw1Lib.cpp : Hw1Lib.h
%
%
%
%
%
%
%cat mediaItem.h
//////////////////////
// CS225
// HW1
// 1/15/15
// Kyle Mulligan
// Declaration of mediaItem Class
//////////////////////

#include <iostream>

class mediaItem 
{

   private:
   //attributes of mediaItem
   //
      std::string name;
      std::string author;
      int numberOfPages;

   public:
   //methods of mediaItem
   //
      void setName(std::string);
      std::string getName(){ return name;}
      void setAuthor(std::string);
      std::string getAuthor(){ return author;}
      void setNumberOfPages(int);
      int getNumberOfPages(){ return numberOfPages;}
};
%
%
%
%
%cat mediaItem.cpp
///////////////////////////////////
// CS225
// HW1
// 1/15/15
// Kyle Mulligan
//Implementation of mediaItem Class
///////////////////////////////////

#include <iostream>
#include "mediaItem.h"

void mediaItem::setName(std::string newName)
{
   name=newName;
}

void mediaItem::setAuthor(std::string newAuthor)
{
   author=newAuthor;
}

void mediaItem::setNumberOfPages(int newNumberOfPages)
{
   numberOfPages=newNumberOfPages;
}


%
%
%
%cat Hw1.cpp
//////////////////////
// CS225
// HW1
// 1/22/15
// Kyle Mulligan
// menu based program which utilizes class mediaItem 
//////////////////////

#include <iostream>
#include "Hw1Lib.h"
#include "mediaItem.h"


mediaItem book1;
bool done=false;

int main()
{
   std::string userInput;


   printMenu();
   while(!done) // loops until the user is done using the menu
   {
      std::cout << std::endl << "Menu : ";
      std::cin >> userInput;
      std::cin.ignore();
      processMenuIn(userInput[0]);
   }
   std::cout << "Goodbye" << std::endl;
}
%
%
%
%cat Hw1Lib.h
//////////////////////
// CS225
// HW1
// 1/22/15
// Kyle Mulligan
// Prototypes for Hw1 
//////////////////////


void printMenu();
void processMenuIn(char);
%
%
%
%
%
%cat Hw1Lib.cpp
//////////////////////
// CS225
// HW1
// 1/22/15
// Kyle Mulligan
// Functions for Hw1 
//////////////////////
#include "mediaItem.h"
#include <iostream>

extern bool done;
extern mediaItem book1;

void printMenu()
{
   std::cout << "C - Clear MediaItem data" <<std::endl;
   std::cout << "D - Display Media Item data" <<std::endl;
   std::cout << "R - Print this menu again" <<std::endl;
   std::cout << "N - Set Media Item name" <<std::endl;
   std::cout << "A - Set Media Item author" <<std::endl;
   std::cout << "P - Set Media Item pages" <<std::endl;
   std::cout << "Q - Quit this program" <<std::endl;
}

void processMenuIn(char menuIn)
{
   switch(toupper(menuIn))  //handles all menu options and works for upper or lower case inputs
   {
      case 'C': //clears the media item
	 book1.setName("");
	 book1.setAuthor("");
	 book1.setNumberOfPages(0);
	 break;


      case 'D': //prints the media item
	 std::cout << "Media Item : " << book1.getName() << std::endl;
	 std::cout << "    Author : " << book1.getAuthor() << std::endl;
	 std::cout << "     Pages : " << book1.getNumberOfPages() << std::endl;
	 break;


      case 'R': //prints the menu again
	 printMenu();
	 break;


      case 'N': // enters the name of media item
      {
	 std::string name;
	 std::cout << "Enter the book's Name: ";
	 std::getline(std::cin,name);
	 book1.setName(name);
      }
      break;

      case 'A': // enters the author of media item
      {
	 std::string author;
	 std::cout << "Enter the author's Name: ";
	 std::getline(std::cin,author);
	 book1.setAuthor(author);
      }
      break;

      case 'P': // enters the number of pages for the media item
      {
	 int pages;
	 std::cout << "Enter the number of Pages: ";
	 std::cin >> pages;
	 book1.setNumberOfPages(pages);
      }
      break;

      case 'Q': // exits the menu
	 done= true;
	 break;
   }
}
%
%
%
%
%
%
%make
g++ -g -Wall -o Hw1.o -c Hw1.cpp
g++ -g -Wall -o Hw1Lib.o -c Hw1Lib.cpp
g++ -g -Wall -o mediaItem.o -c mediaItem.cpp
g++ -g -Wall -o mediaItem1Project Hw1.o Hw1Lib.o mediaItem.o
echo All done
All done
%
%
%
%
%./mediaItem1Project
C - Clear MediaItem data
D - Display Media Item data
R - Print this menu again
N - Set Media Item name
A - Set Media Item author
P - Set Media Item pages
Q - Quit this program

Menu : c

Menu : d
Media Item : 
    Author : 
     Pages : 0

Menu : r
C - Clear MediaItem data
D - Display Media Item data
R - Print this menu again
N - Set Media Item name
A - Set Media Item author
P - Set Media Item pages
Q - Quit this program

Menu : n
Enter the book's Name: The Giving Tree

Menu : A
Enter the author's Name: Shel Silverstein

Menu : p
Enter the number of Pages: 22

Menu : d
Media Item : The Giving Tree
    Author : Shel Silverstein
     Pages : 22

Menu : q
Goodbye
%
%
%exit
exit

Script done on Fri Jan 23 11:18:38 2015
